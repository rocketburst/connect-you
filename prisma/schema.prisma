// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  mainLinks     MainLink[]
  socialLinks   SocialLink[]
  Profile       Profile?

  @@map("Users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("Verification Tokens")
}

model Profile {
  id         String @id @default(cuid())
  name       String
  email      String
  bio        String
  uniqueHref String @unique
  user       User   @relation(fields: [userId], references: [id])
  userId     String @unique
}

model MainLink {
  id     String  @id @default(cuid())
  name   String
  href   String
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model SocialLink {
  id     String         @id @default(cuid())
  type   SocialLinkType
  href   String
  User   User?          @relation(fields: [userId], references: [id])
  userId String?
}

enum SocialLinkType {
  TWITTER
  INSTAGRAM
  LINKEDIN
  GITHUB
}
